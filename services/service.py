from abc import abstractmethod, ABCMeta
import os
import re
import requests
import shutil


class Service(metaclass=ABCMeta):
    '''
    A service is a way to save a song. For example, adding a track
    to a playlist, downloading a file, or opening a web browser to a
    purchase URL.
    
    Services are required to implement the methods `save` and `search`,
    detailed below.
    '''
    name = "Service"
    
    @abstractmethod
    def __init__(self, config):
        '''
        Services' constructors will be passed their section of the
        configuration file. This is where credentials, api keys, playlist
        identifiers, folder paths, and so on can be stored.
        
        The `config` param functions like a dictionary.
        The keys are up to the service implementation.
        
        This method should raise an exception if the service's server cannot
        be reached or if authentication fails.
        '''
        pass
        
    @abstractmethod
    def search(self, track, queue):
        '''
        Search the service for a track, enqueuing a list of ServiceTrack candidates.
        
        @param track A pylast track object
        @param queue Queue for results
        '''
    
    @abstractmethod
    def save(self, servicetrack):
        '''
        Attempt to save a track. If saving is successful, no other services
        will be attempted.
        
        @param track A ServiceTrack, generated by search()
        @return (success, message)
            success: True iff saving was successful
            message: str describing what went right or wrong
                "Saved to dir/file.mp3"
                "Added to playlist 'New Music'"
                "Spotify add returned status 500"
        '''
        pass
        
    def download(self, url, artist, title, extension):
        '''
        Download the file at `url` to "{save_directory}\{artist} - {title}.{extension}".
        Raise HTTPError on non-200 status.
        
        Assumes a 'save_directory' key in the config.
        
        Convenience method. Services are not required to implement nor call this method.
        @param url The url from which to download the song
        @param artist The artist name
        @param title The song title
        @param extension File extension, e.g. '.mp3'
        @return filepath to the downloaded song
        '''
        filename = '{} - {}.{}'.format(artist, title, extension)
        # Quick pass at making the filename legal
        # TODO: Really this is filesystem dependent and should be improved
        filename = re.sub(r'[/\\:*?"<>|]', '_', filename)
        filepath = os.path.join(self.config['save_directory'], filename)
        r = requests.get(url, stream=True)
        r.raise_for_status()
        with open(filepath, 'wb') as f:
            r.raw.decode_content = True   # Uncompress gzipped content
            shutil.copyfileobj(r.raw, f)  # Save to disk
        return filepath